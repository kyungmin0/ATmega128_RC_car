
RC car whole code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000022c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089f  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c1  00000000  00000000  00000b77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031a  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000404  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	1a c0       	rjmp	.+52     	; 0xae <__vector_30>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	41 d0       	rcall	.+130    	; 0x12c <main>
  aa:	84 c0       	rjmp	.+264    	; 0x1b4 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_30>:
#include <avr/interrupt.h>

volatile unsigned char flag;	// 입력 받을 변수 선언

ISR(USART1_RX_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	flag = UDR1;
  ba:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <init>:
	}
}

void init()
{
	DDRA = 0xFF;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  d2:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x08;
  d4:	88 e0       	ldi	r24, 0x08	; 8
  d6:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x1F;
  d8:	8f e1       	ldi	r24, 0x1F	; 31
  da:	82 b9       	out	0x02, r24	; 2
	
	UCSR1A = 0x00;	// UCSR1A = 0b 0000 0000
  dc:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B = 0x98;	// UCSR1B = 0b 1001 1000
  e0:	88 e9       	ldi	r24, 0x98	; 152
  e2:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = 0x06;	// UCSR1C = 0b 0000 0110
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UBRR1H = 0;
  ec:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 103;
  f0:	87 e6       	ldi	r24, 0x67	; 103
  f2:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  f6:	08 95       	ret

000000f8 <DCmotor>:
}

void DCmotor()
{
	TCCR1A = (1<<COM1B1)|(0<<COM1B0)|(1<<WGM11);
  f8:	82 e2       	ldi	r24, 0x22	; 34
  fa:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM13)|(1<<WGM12)|(0<<CS02)|(0<<CS01)|(1<<CS00); //prescaler 1
  fc:	89 e1       	ldi	r24, 0x19	; 25
  fe:	8e bd       	out	0x2e, r24	; 46
	
	ICR1 = 799; // TOP
 100:	8f e1       	ldi	r24, 0x1F	; 31
 102:	93 e0       	ldi	r25, 0x03	; 3
 104:	97 bd       	out	0x27, r25	; 39
 106:	86 bd       	out	0x26, r24	; 38
 108:	08 95       	ret

0000010a <servo>:
	// B channel PWM
}

void servo()
{
		TCCR3A |= (1<<COM3B1) | (0<<COM3B0) | (1<<WGM31) | (0<<WGM30);		// TCCR3A = 0b 0010 0010 , 0x22	/ B channel
 10a:	eb e8       	ldi	r30, 0x8B	; 139
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	82 62       	ori	r24, 0x22	; 34
 112:	80 83       	st	Z, r24
		TCCR3B |= (1<<WGM33) | (1<<WGM32) | (0<<CS32) | (1<<CS31) | (1<<CS30);		// TCCR3B = 0b 0001 1011 , 0x1b / 64분주
 114:	ea e8       	ldi	r30, 0x8A	; 138
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8b 61       	ori	r24, 0x1B	; 27
 11c:	80 83       	st	Z, r24
		ICR3 = 4999; // Fast PWM TOP = ICR3 / 주기 : 20ms
 11e:	87 e8       	ldi	r24, 0x87	; 135
 120:	93 e1       	ldi	r25, 0x13	; 19
 122:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 126:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 12a:	08 95       	ret

0000012c <main>:
void DCmotor();
void servo();

int main(void)
{
	init();
 12c:	d0 df       	rcall	.-96     	; 0xce <init>
	DCmotor();
 12e:	e4 df       	rcall	.-56     	; 0xf8 <DCmotor>
	servo();
 130:	ec df       	rcall	.-40     	; 0x10a <servo>
 132:	78 94       	sei
	sei();
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	while(1)
	{
		if(flag =='G')
 138:	87 34       	cpi	r24, 0x47	; 71
 13a:	49 f4       	brne	.+18     	; 0x14e <main+0x22>
 13c:	8e ef       	ldi	r24, 0xFE	; 254
		{
			PORTA = 0xFE;
 13e:	8b bb       	out	0x1b, r24	; 27
 140:	8f e7       	ldi	r24, 0x7F	; 127
			OCR1B = 639;
 142:	92 e0       	ldi	r25, 0x02	; 2
 144:	99 bd       	out	0x29, r25	; 41
 146:	88 bd       	out	0x28, r24	; 40
 148:	8a e0       	ldi	r24, 0x0A	; 10
			PORTE = 0x0A;
 14a:	83 b9       	out	0x03, r24	; 3
 14c:	f3 cf       	rjmp	.-26     	; 0x134 <main+0x8>
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		else if(flag =='B')
 152:	82 34       	cpi	r24, 0x42	; 66
 154:	49 f4       	brne	.+18     	; 0x168 <main+0x3c>
 156:	8f e7       	ldi	r24, 0x7F	; 127
		{
			PORTA = 0x7F;
 158:	8b bb       	out	0x1b, r24	; 27
 15a:	8f e7       	ldi	r24, 0x7F	; 127
			OCR1B = 639;
 15c:	92 e0       	ldi	r25, 0x02	; 2
 15e:	99 bd       	out	0x29, r25	; 41
 160:	88 bd       	out	0x28, r24	; 40
 162:	85 e0       	ldi	r24, 0x05	; 5
			PORTE = 0x05;
 164:	83 b9       	out	0x03, r24	; 3
 166:	e6 cf       	rjmp	.-52     	; 0x134 <main+0x8>
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		else if(flag =='R')
 16c:	82 35       	cpi	r24, 0x52	; 82
 16e:	59 f4       	brne	.+22     	; 0x186 <main+0x5a>
 170:	8f e0       	ldi	r24, 0x0F	; 15
		{
			PORTA = 0x0F;
 172:	8b bb       	out	0x1b, r24	; 27
 174:	80 e1       	ldi	r24, 0x10	; 16
			PORTE = 0x10;
 176:	83 b9       	out	0x03, r24	; 3
 178:	82 ec       	ldi	r24, 0xC2	; 194
			OCR3B = 450;
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 180:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 184:	d7 cf       	rjmp	.-82     	; 0x134 <main+0x8>
 186:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		else if(flag =='L')
 18a:	8c 34       	cpi	r24, 0x4C	; 76
 18c:	59 f4       	brne	.+22     	; 0x1a4 <main+0x78>
 18e:	80 ef       	ldi	r24, 0xF0	; 240
		{
			PORTA = 0xF0;
 190:	8b bb       	out	0x1b, r24	; 27
 192:	80 e1       	ldi	r24, 0x10	; 16
			PORTE = 0x10;
 194:	83 b9       	out	0x03, r24	; 3
 196:	8c e2       	ldi	r24, 0x2C	; 44
			OCR3B = 300;
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 19e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1a2:	c8 cf       	rjmp	.-112    	; 0x134 <main+0x8>
 1a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		else if(flag =='Q')
 1a8:	81 35       	cpi	r24, 0x51	; 81
 1aa:	21 f6       	brne	.-120    	; 0x134 <main+0x8>
 1ac:	1b ba       	out	0x1b, r1	; 27
		{
			PORTA = 0x00;
 1ae:	19 bc       	out	0x29, r1	; 41
			OCR1B = 0;
 1b0:	18 bc       	out	0x28, r1	; 40
 1b2:	c0 cf       	rjmp	.-128    	; 0x134 <main+0x8>

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
